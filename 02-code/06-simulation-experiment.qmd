---
title: "Simulation experiment"
format: html
editor: source
---

## Prepare the environment

```{r}
# load the relevant libraries
library(dplyr)
library(ggplot2)
library(patchwork)
library(splines)

# load plotting theme
source(here::here("functions/plot_theme.R"))
```

```{r}
# set location for outputted figures and tables
figure_table_path <- here::here("03-report/figures-tables")
```

## Load the model object

```{r}
# set the species
i_species_sel <- "Solidago_gigantea"

# exclude_high_N
exclude_high_N <- FALSE
```

```{r}
# get the list of model files
mod_files <- list.files(here::here("02-code/outputs"))
mod_files <- mod_files[grepl("model", mod_files)]

# load the model
mod <- readRDS(file.path(here::here("02-code/outputs"),
                         mod_files[grepl(i_species_sel, mod_files) & grepl(exclude_high_N, mod_files)]))

# check the model
mod
```

## Simulation experiment

The code below checks if a simulation output has been generated for the specific species and exclude_high_N combination. If the relevant output is not presentThe simulations take around

```{r}
# get the potential file name
sim_file <- paste0(i_species_sel, paste0("-exlude_high_N-", exclude_high_N),
                   "-simulation-output.rds")

# run the simulation if the output is not already present
if (!(sim_file %in% list.files(here::here("02-code/outputs")))) {
  
    rstudioapi::jobRunScript(
      path = here::here("02-code/jobs/run-competition-simulation.R"),
      name = "competition-simulation",
      encoding = "unknown",
      workingDir = NULL,
      importEnv = TRUE,
      exportEnv = "")
    
} else {
  
  message("Simulation has already been performed!")
  
}

# load the simulated data
sim_out <- readRDS(file.path(here::here("02-code/outputs"), sim_file))

```

We now visualise the output of models.

```{r}
# summarise and pivot to the wide format
c_metric <- 
  sim_out |>
  dplyr::bind_rows() |>
  tidyr::pivot_wider(id_cols = c("alpha_sim", "alpha_sim_rep", "N", "M", "replicate"),
                     names_from = I,
                     values_from = B)

# rename the variables
names(c_metric) <- c("alpha_sim", "alpha_sim_rep", "N", "M", "replicate", "BN_alone", "BN_invasive")

# calculate the competition metric
c_metric <-
  c_metric |>
  dplyr::mutate(C = log(BN_alone/BN_invasive))

# summarise by I and M
c_metric <-
  c_metric |>
  dplyr::group_by(N, M) |>
  dplyr::summarise(C_m = mean(C),
                   C_sd = sd(C))

# plot the results
ggplot(data = c_metric |> dplyr::mutate(M = ifelse(M == 0, "a No microbes", "b Microbes")),
       mapping = aes(x = N, y = C_m)) +
  geom_point() +
  geom_errorbar(mapping = aes(x = N, ymin = C_m - C_sd, ymax = C_m + C_sd),
                width = 0) +
  geom_smooth(colour = "black", size = 0.5, alpha = 0.25) +
  labs(x = "log(Nitrogen Level)", y = "Competition metric") +
  facet_wrap(~M) +
  theme_meta()
```

```{r}
# bind into a data.frame
sim_df <- dplyr::bind_rows(sim_out)

# calculate an interval
sim_df_sum <-
  sim_df |>
  dplyr::mutate(sim_id = paste(alpha_sim, "_", alpha_sim_rep, sep = "")) |>
  dplyr::mutate(B = log(B/4)) |>
  dplyr::group_by(sim_id, N, M, I) |>
  dplyr::summarise(B_mean = mean(B),
                   B_low = mean(B) - sd(B),
                   B_high = mean(B) + sd(B)) |>
  dplyr::ungroup()

# fix labels for plotting
sim_df_sum <- fix_labels(x = sim_df_sum)

# get the relevant grouping variable
sim_df_sum$sim_id_treat <- paste(sim_df_sum$sim_id, "_", sim_df_sum$I, sep = "")

# save dataset for plotting

# generate the name
sim_plot_data <- paste0(i_species_sel, paste0("-exlude_high_N-", exclude_high_N),
                        "-simulation-plot-data.rds")

# export as a .rds file
saveRDS(object = sim_df_sum,
        file = file.path(here::here("02-code/outputs"), sim_plot_data))

## function for plotting
sim_exp_plot <- function(x_dat, M_sel, y_lims = NA, col1, col2) {
  
  # extract y_lims
  y_lim_range <-
    if (all(is.na(y_lims))) {
      range(c(x_dat$B_low, x_dat$B_high, x_dat$B_mean)) + c(-0.025, 0.025)
    } else {
      y_lims
    }
  
  ggplot() +
  geom_line(data = x_dat |> dplyr::filter(M == M_sel),
             mapping = aes(x = N, y = B_mean, colour = I, group = sim_id_treat), 
             linewidth = 0.25, alpha = 0.75) +
  geom_ribbon(data = x_dat |> dplyr::filter(M == M_sel),
              mapping = aes(x = N, ymin = B_low, ymax = B_high, 
                            fill = I, colour = NULL, group = sim_id_treat),
              alpha = 0.05, show.legend = FALSE) +
  scale_colour_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_fill_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_x_continuous() +
  scale_y_continuous(limits = y_lim_range) +
  ylab("Native: ln(Biomass) (mg)") +
  xlab("ln(Nitrogen) (mg)") +
  ggtitle(paste0(M_sel))+
  theme_meta() +
  theme(legend.title = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
  
}

# No microbes
p_nm <- sim_exp_plot(x_dat = sim_df_sum, 
                     M_sel = "No microbes", 
                     y_lims = NA,
                     col1 = "gray60", col2 = "gray0")


  
# invasive plot
p_m <- sim_exp_plot(x_dat = sim_df_sum, 
                    M_sel = "Microbes", 
                    y_lims = NA,
                    col1 = "lightgreen", col2 = "forestgreen")

# bind the plots using patchwork
p_nm + p_m + 
  plot_layout() +
  plot_annotation(tag_levels = "a")
```








