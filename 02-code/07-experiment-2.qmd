---
title: "Experiment 2"
format: html
editor: source
---

## Prepare the environment

```{r}
# load the relevant libraries
library(dplyr)
library(ggplot2)
library(patchwork)
library(emmeans)

# load plotting theme
source(here::here("functions/plot_theme.R"))

# load loo cv function
source(here::here("functions/compare_models_loocv.R"))
```


```{r}
# set location for outputted figures and tables
figure_table_path <- here::here("03-report/figures-tables")
```

## Load relevant data

```{r}
# load the raw data
dat_raw <- readr::read_csv2(here::here("data-raw/all-raw-data-response-phase.csv"),
                            guess_max = 1000)
```

### Clean the data

```{r}
# load the experiment 1 data cleaning function
source(here::here("02-code/03-clean-exp2.R"))
```

Erigeron_canadensis
Phytolacca_americana
Solidago_gigantea
Sporobolus_indicus

```{r}
# set the species
i_species_sel <- "Solidago_gigantea"

# exclude_high_N
exclude_high_N <- FALSE
```

```{r}
# clean the data
dat_ex2_mod <- 
  clean_exp2(data = dat_raw,
             i_species = i_species_sel,
             exclude_high_N = exclude_high_N) |>
  dplyr::mutate(log_B = log(B),
                N = N - min(N),
                I = factor(I),
                M = factor(M))

# check the data
head(dat_ex2_mod)
```

```{r}
# check a few specific comparisons
dat_ex2_mod |>
  dplyr::filter(M == 0, N == 0) |>
  dplyr::select(M, N, I, rep, log_B) |>
  View()
```


```{r}
# model list
model_list <-
  list(m1 = log_B ~ N + M + I + N:M + N:I + M:I + N:M:I,
       m2 = log_B ~ bs(N, df = 2, degree = 1) + M + I + bs(N, df = 2, degree = 1):M + bs(N, df = 2, degree = 1):I + M:I + bs(N, df = 2, degree = 1):M:I,
       m3 = log_B ~ bs(N, df = 3, degree = 1) + M + I + bs(N, df = 3, degree = 1):M + bs(N, df = 3, degree = 1):I + M:I + bs(N, df = 3, degree = 1):M:I,
       m4 = log_B ~ bs(N, df = 3, degree = 2) + M + I + bs(N, df = 3, degree = 2):M + bs(N, df = 3, degree = 2):I + M:I + bs(N, df = 3, degree = 2):M:I,
       m5 = log_B ~ bs(N, df = 4, degree = 3) + M + I + bs(N, df = 4, degree = 3):M + bs(N, df = 4, degree = 3):I + M:I + bs(N, df = 4, degree = 3):M:I)

```


```{r}
# run the cross-validation procedure
cv_mod <- compare_models_loocv(data = dat_ex2_mod, formulas = model_list) 

# check the models
cv_mod$LOO_est

# get best model
best_mod <- cv_mod$LOO_est$model[1]
```


```{r}
# wrap this analysis into a function
lrt_analysis <- function(model) {
  
  # extract full model
  full_model <- lm(model_list[[model]], data = dat_ex2_mod)
  
  # fit the reduced model
  reduced_model <- 
    lm(remove_three_way_interaction(model_list[[model]]), 
       data = dat_ex2_mod)
  
  # compare the two models
  anova_table <- anova(reduced_model, full_model, test = c("Chisq"))
  
  return(list(full_model = full_model,
              reduced_model = reduced_model,
              anova_table = anova_table))
  
}

# run the analysis
lrt_object <- lrt_analysis(model = best_mod)

# check the output
lrt_object$anova_table
```


```{r}
# extract model prediction with prediction interval
pred_ex2_mod <-
  tidyr::expand_grid(M = factor(c(0, 1)),
                     I = factor(c(0, 1)),
                     N = seq(0 - 0.05, max(dat_ex2_mod$N) + 0.05, 0.05))

# generate the predictions
pred_ex2 <-
  predict(lrt_object$full_model, newdata = pred_ex2_mod, interval = "confidence") |> 
  as.data.frame() |>
  dplyr::tibble()

# rename the columns
names(pred_ex2) <- c("prediction", "lower", "upper")

# bind the predictions to the newdata template
pred_ex2_mod <- dplyr::bind_cols(pred_ex2_mod, dplyr::tibble(pred_ex2))

# run the label fixing
dat_ex2_plot <- fix_labels(x = dat_ex2_mod)
pred_ex2_plot <- fix_labels(x = pred_ex2_mod)

## function for plotting
exp2_plot <- function(x_dat, x_pred, M_sel, y_lims = NA, col1, col2) {
  
  # extract y_lims
  y_lim_range <-
    if (all(is.na(y_lims))) {
      range(c(x_dat$log_B, x_pred$upper, x_pred$lower)) + c(-0.05, 0.05)
    } else {
      y_lims
    }
  
  ggplot() +
   ggbeeswarm::geom_quasirandom(data = x_dat |> dplyr::filter(M == M_sel),
                                mapping = aes(x = N, y = log_B, colour = I),
                                width = 0.05) +
   geom_line(data = x_pred |> dplyr::filter(M == M_sel),
             mapping = aes(x = N, y = prediction, colour = I),
             show.legend = FALSE) +
   geom_ribbon(data = x_pred |> dplyr::filter(M == M_sel),
               mapping = aes(x = N, ymin = lower, ymax = upper, fill = I, colour = NULL),
               alpha = 0.1, show.legend = FALSE) +
  scale_colour_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_fill_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_x_continuous(breaks = round(unique(x_dat[["N"]]), 1)) +
  scale_y_continuous(limits = y_lim_range) +
  ylab("ln(Biomass) (mg)") +
  xlab("ln(Nitrogen) (mg)") +
  ggtitle(paste0(M_sel))+
  theme_meta() +
  theme(legend.title = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
  
}

# No microbes
p_nm <- exp2_plot(x_dat = dat_ex2_plot, x_pred = pred_ex2_plot, 
                  M_sel = "No microbes", 
                  y_lims = NA,
                  col1 = "gray60", col2 = "gray0")
  
# invasive plot
p_m <- exp2_plot(x_dat = dat_ex2_plot, x_pred = pred_ex2_plot, 
                 M_sel = "Microbes", 
                 y_lims = NA,
                 col1 = "lightgreen", col2 = "forestgreen")

# bind the plots using patchwork
p_nm + p_m + 
  plot_layout() +
  plot_annotation(tag_levels = "a")
```

We now plot the observed data and fitted model over the predictions made via the simulation experiment:

```{r}
## function for plotting
exp2_plot_sim <- function(x_dat, x_pred, x_sim, M_sel, y_lims = NA, col1, col2) {
  
  # extract y_lims
  y_lim_range <-
    if (all(is.na(y_lims))) {
      range(c(x_dat$log_B, x_pred$upper, x_pred$lower), x_sim$B_low, x_sim$B_high) + c(-0.05, 0.05)
    } else {
      y_lims
    }
  
  ggplot() +
    ggbeeswarm::geom_quasirandom(data = x_dat |> dplyr::filter(M == M_sel),
                                 mapping = aes(x = N, y = log_B, colour = I),
                                 width = 0.05) +
    geom_line(data = x_pred |> dplyr::filter(M == M_sel),
              mapping = aes(x = N, y = prediction, colour = I),
              show.legend = FALSE) +
    geom_ribbon(data = x_pred |> dplyr::filter(M == M_sel),
                mapping = aes(x = N, ymin = lower, ymax = upper, fill = I, colour = NULL),
                alpha = 0.1, show.legend = FALSE) +
    geom_line(data = x_sim |> dplyr::filter(M == M_sel),
              mapping = aes(x = N, y = B_mean, colour = I, group = sim_id_treat), 
              linewidth = 0.25, alpha = 0.75) +
    geom_ribbon(data = x_sim |> dplyr::filter(M == M_sel),
                mapping = aes(x = N, ymin = B_low, ymax = B_high, 
                              fill = I, colour = NULL, group = sim_id_treat),
                alpha = 0.05, show.legend = FALSE) +
    scale_colour_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
    scale_fill_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
    scale_x_continuous(breaks = round(unique(x_dat[["N"]]), 1)) +
    scale_y_continuous(limits = y_lim_range) +
    ylab("ln(Biomass) (mg)") +
    xlab("ln(Nitrogen) (mg)") +
    ggtitle(paste0(M_sel))+
    theme_meta() +
    theme(legend.title = element_blank(),
          plot.title = element_text(hjust = 0.5),
          legend.position = "bottom")
  
}

# load the simulated data
dat_sim <-
  readRDS(file.path(here::here("02-code/outputs"),
                    paste0(i_species_sel, paste0("-exlude_high_N-", exclude_high_N),
                           "-simulation-plot-data.rds")))

# No microbes
p_nm <- exp2_plot_sim(x_dat = dat_ex2_plot, x_pred = pred_ex2_plot, 
                      x_sim = dat_sim,
                      M_sel = "No microbes", 
                      y_lims = NA,
                      col1 = "gray60", col2 = "gray0")
  
# invasive plot
p_m <- exp2_plot_sim(x_dat = dat_ex2_plot, x_pred = pred_ex2_plot, 
                     M_sel = "Microbes", 
                     x_sim = dat_sim,
                     y_lims = NA,
                     col1 = "lightgreen", col2 = "forestgreen")

# bind the plots using patchwork
p_nm + p_m + 
  plot_layout() +
  plot_annotation(tag_levels = "a")
```








