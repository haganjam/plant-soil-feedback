---
title: "Simulation experiment"
format: html
editor: source
---

## Prepare the environment

```{r}
# prepare the environmebnt
source(here::here("functions/prep_exp_env.R"))
```

## Load the model object

Erigeron_canadensis
Phytolacca_americana
Solidago_gigantea
Sporobolus_indicus

```{r}
# create the relevant parameters if params not present in environment
set_default_params(list(
  invasive_species = "Solidago_gigantea",
  exclude_highest_N = FALSE
))

# set the parameters
i_species_sel <- params$invasive_species

# exclude_high_N
exclude_high_N <- params$exclude_highest_N
```

```{r}
# get the list of model files
mod_files <- list.files(here::here("02-code/outputs"))
mod_files <- mod_files[grepl("model", mod_files)]

# load the model
mod <- readRDS(file.path(here::here("02-code/outputs"),
                         mod_files[grepl(i_species_sel, mod_files) & grepl(exclude_high_N, mod_files)]))

# check the model
mod
```

## Simulation experiment

The code below checks if a simulation output has been generated for the specific species and exclude_high_N combination. The simulation runs in a separate background R-session (RStudio jobs).

```{r}
# get the potential file name
sim_file <- paste0(i_species_sel, paste0("-exlude_high_N-", exclude_high_N),
                   "-simulation-output")

# run the simulation if the output is not already present
if (all(grepl(sim_file, list.files(here::here("02-code/outputs"))) == FALSE)) {
  
    rstudioapi::jobRunScript(
      path = here::here("02-code/jobs/run-competition-simulation.R"),
      name = "competition-simulation",
      encoding = "unknown",
      workingDir = NULL,
      importEnv = TRUE,
      exportEnv = "")
    
} else {
  
  message("Simulation has already been performed!")
  
}
```

Load the simulated data:

```{r}
# let the system sleep for 10 seconds to give time for the datasets to be saved
Sys.sleep(10)

# load the simulated datasets
sim_files <- list.files(here::here("02-code/outputs"))
sim_files <- sim_files[grepl(sim_file, sim_files)]

# load the simulation files
sim_out <- 
  lapply(sim_files, function(file) {
    readRDS(file.path(here::here("02-code/outputs"), file))
  })
names(sim_out) <- sim_files

# check the data
head(sim_out[[1]][[1]])
```

We now visualise the output of models. The zero competition is when, in the simulation, the natives "win" and therefore there are no invasives.

```{r}
# choose a simulation output
sim_sel <- 1

# summarise and pivot to the wide format
c_metric <- vector("list", length = length(sim_out[[sim_sel]]))
for (i in seq_along(c_metric)) {
  
  # print the iteration
  if (i %% 100 == 0) {
    message("Iteration: ", i)
  }
  
  # pivot each section of the list wider
  c_metric[[i]] <-
    sim_out[[sim_sel]][[i]] |>
    tidyr::pivot_wider(id_cols = c("sim_id", "N", "M"),
                       names_from = I,
                       values_from = B_mean)
  
}

# bind into a data.frame
c_metric <- 
  c_metric |>
  dplyr::bind_rows()
  
# complete cases
c_metric <- c_metric[complete.cases(c_metric), ]

# rename the variables
names(c_metric) <- c("sim_id", "N", "M", "BN_alone", "BN_invasive")

# calculate the competition metric
c_metric <-
  c_metric |>
  dplyr::mutate(C = log(BN_alone/BN_invasive))

# check the summary statistics
c_metric |> 
  summary()
```
```{r}
# summarise by I and M
c_metric <-
  c_metric |>
  dplyr::group_by(N, M) |>
  dplyr::summarise(C_m = mean(C, na.rm = TRUE),
                   C_sd = sd(C, na.rm = TRUE))

# plot the results
ggplot(data = c_metric |> dplyr::mutate(M = ifelse(M == 0, "a No microbes", "b Microbes")),
       mapping = aes(x = N, y = C_m)) +
  geom_point() +
  geom_errorbar(mapping = aes(x = N, ymin = C_m - C_sd, ymax = C_m + C_sd),
                width = 0) +
  labs(x = "log(Nitrogen Level)", y = "Competition metric") +
  facet_wrap(~M) +
  theme_meta()
```


```{r}
# bind into a data.frame
sim_sel <- 1
sim_df <- dplyr::bind_rows(sim_out[[sim_sel]])

# fix labels for plotting
sim_df <- fix_labels(x = sim_df)

# sub-sample the data
set.seed(323590)
sim_id_x <- sample(unique(sim_df$sim_id), 100)

# get these 100 lines
sim_df <-
  sim_df |>
  dplyr::filter(sim_id %in% sim_id_x)

# get the relevant grouping variable
sim_df$sim_id_treat <- paste(sim_df$sim_id, "_", sim_df$I, sep = "")

# save dataset for plotting

# generate the name
sim_plot_data <- paste0(i_species_sel, paste0("-exlude_high_N-", exclude_high_N),
                        "-simulation-plot-data.rds")

# export as a .rds file
saveRDS(object = sim_df,
        file = file.path(here::here("02-code/outputs"), sim_plot_data))

## function for plotting
sim_exp_plot <- function(x_dat, M_sel, y_lims = NA, col1, col2) {
  
  # extract y_lims
  y_lim_range <-
    if (all(is.na(y_lims))) {
      range(c(x_dat$B_mean)) + c(-0.025, 0.025) # x_dat$B_low, x_dat$B_high, 
    } else {
      y_lims
    }
  
  ggplot() +
  geom_line(data = x_dat |> dplyr::filter(M == M_sel),
             mapping = aes(x = N, y = B_mean, colour = I, group = sim_id_treat), 
             linewidth = 0.1, alpha = 0.25) +
  # geom_ribbon(data = x_dat |> dplyr::filter(M == M_sel),
              # mapping = aes(x = N, ymin = B_low, ymax = B_high, 
                            # fill = I, colour = NULL, group = sim_id_treat),
              # alpha = 0.05, show.legend = FALSE) +
  scale_colour_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_fill_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_x_continuous() +
  scale_y_continuous(limits = y_lim_range) +
  guides(colour = guide_legend(override.aes = list(linewidth = 1))) +
  ylab("Native: ln(Biomass) (mg)") +
  xlab("ln(Nitrogen) (mg)") +
  ggtitle(paste0(M_sel))+
  theme_meta() +
  theme(legend.title = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
  
}

# Randomly sample 100 lines or something

# No microbes
p_nm <- sim_exp_plot(x_dat = sim_df, 
                     M_sel = "No microbes", 
                     y_lims = NA,
                     col1 = "gray60", col2 = "gray0")

# invasive plot
p_m <- sim_exp_plot(x_dat = sim_df, 
                    M_sel = "Microbes", 
                    y_lims = NA,
                    col1 = "lightgreen", col2 = "forestgreen")

# bind the plots using patchwork
p_nm + p_m + 
  plot_layout() +
  plot_annotation(tag_levels = "a", title = gsub("_", " ", i_species_sel))
```



Pasted from the experiment 2 so might need some adaptation:

We now plot the observed data and fitted model over the predictions made via the simulation experiment:

```{r}
## function for plotting
exp2_plot_sim <- function(x_dat, x_pred, x_sim, M_sel, y_lims = NA, col1, col2) {
  
  # extract y_lims
  y_lim_range <-
    if (all(is.na(y_lims))) {
      range(c(x_dat$log_B, x_pred$upper, x_pred$lower), x_sim$B_low, x_sim$B_high) + c(-0.05, 0.05)
    } else {
      y_lims
    }
  
  ggplot() +
    geom_line(data = x_sim |> dplyr::filter(M == M_sel),
              mapping = aes(x = N, y = B_mean, colour = I, group = sim_id_treat), 
              linewidth = 0.25, alpha = 0.15) +
    ggbeeswarm::geom_quasirandom(data = x_dat |> dplyr::filter(M == M_sel),
                                 mapping = aes(x = N, y = log_B, fill = I),
                                 width = 0.05, shape = 21, colour = "white") +
    geom_line(data = x_pred |> dplyr::filter(M == M_sel),
              mapping = aes(x = N, y = prediction, colour = I),
              show.legend = FALSE) +
    geom_ribbon(data = x_pred |> dplyr::filter(M == M_sel),
                mapping = aes(x = N, ymin = lower, ymax = upper, fill = I, colour = NULL),
                alpha = 0.1, show.legend = FALSE) +
    scale_colour_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
    scale_fill_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
    scale_x_continuous(breaks = round(unique(x_dat[["N"]]), 1)) +
    scale_y_continuous(limits = y_lim_range) +
    ylab("ln(Biomass) (mg)") +
    xlab("ln(Nitrogen) (mg)") +
    ggtitle(paste0(M_sel))+
    theme_meta() +
    theme(legend.title = element_blank(),
          plot.title = element_text(hjust = 0.5, size = 10),
          legend.position = "bottom")
  
}

# load the simulated data
dat_sim <-
  readRDS(file.path(here::here("02-code/outputs"),
                    paste0(i_species_sel, paste0("-exlude_high_N-", exclude_high_N),
                           "-simulation-plot-data.rds")))

# No microbes
p_nm <- exp2_plot_sim(x_dat = dat_ex2_plot, x_pred = pred_ex2_plot, 
                      x_sim = dat_sim,
                      M_sel = "No microbes", 
                      y_lims = NA,
                      col1 = "gray60", col2 = "gray0")
  
# invasive plot
p_m <- exp2_plot_sim(x_dat = dat_ex2_plot, x_pred = pred_ex2_plot, 
                     M_sel = "Microbes", 
                     x_sim = dat_sim,
                     y_lims = NA,
                     col1 = "lightgreen", col2 = "forestgreen")

# bind the plots using patchwork
p_nm + p_m + 
  plot_layout() +
  plot_annotation(tag_levels = "a", title = gsub("_", " ", i_species_sel),
                  theme = theme(plot.title = element_text(size = 11, face = "italic")))
```









