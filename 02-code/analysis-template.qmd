---
title: "Analysis template"
format: html
editor: source
---

This notebook is the analysis template for analysing the data for the different invasive species studied. It follows the analysis plan laid out in the data simulation in this repository (`01-plan/01-study-design/02-data-simulation.qmd`).

```{r}
# load the relevant libraries
library(dplyr)
library(ggplot2)
library(patchwork)

# load plotting theme
source(here::here("functions/plot_theme.R"))

# label function
fix_labels <- function(x) {
  vars <- names(x)[names(x) %in% c("M", "P", "I")]
  for (i in vars) {
    x[[i]] <-
      if (!is.factor(x[[i]])) {
        factor(x[[i]])
      } else {
        x[[i]]
      }
  }
  # make labels readable
  levels(x[["M"]]) <- c("No microbes", "Microbes")
  x[["M"]] <- forcats::fct_relevel(x[["M"]], c("No microbes", "Microbes"))
  if ("P" %in% names(x)) {
    levels(x[["P"]]) <- c("Native", "Invasive")
  }
  if ("I" %in% names(x)) {
    levels(x[["I"]]) <- c("Native alone", "Native + invasive")
  }
  # add minimum back to nitrogen
  x[["N"]] <- x[["N"]] + log(4) 
  x
}
```

```{r}
# set location for outputted figures and tables
figure_table_path <- here::here("03-report/figures-tables")
```


## Load the raw data

The data for both experiments (i.e. @sec-experiment-1 and @sec-experiment-2) are in one raw data file. The cleaning functions `02-code/02-clean-exp1` and `02-code/03-clean-exp2` process the data for further analysis. These functions also contain options for assessing the sensitivity of the results to outliers and other factors identified during exploratory data analysis.

```{r}
# load the raw data
dat_raw <- readr::read_csv2(here::here("data-raw/all-raw-data-response-phase.csv"),
                            guess_max = 1000)
```

## Experiment 1 {#sec-experiment-1}

### Data cleaning 

We start by loading the data cleaning function for experiment 1:

```{r}
# load the experiment 1 data cleaning function
source(here::here("02-code/02-clean-exp1.R"))
```

Choose one of the species: "Erigeron_canadensis", "Phytolacca_americana", "Solidago_gigantea", "Sporobolus_indicus":

```{r}
# set the species
i_species_sel <- "Phytolacca_americana"

# exclude_high_N
exclude_high_N <- FALSE

# clean the data
dat_ex1 <- clean_exp1(data = dat_raw,
                      i_species = i_species_sel,
                      exclude_high_N = exclude_high_N) 

# check the data
head(dat_ex1)
```

### Data preparation

We prepare the data for the model fitting by log-transforming the biomass variable ($B$) and subtracting minimum N-level from the N variable ($N$) so that the intercept corresponds to the lowest nitrogen level (log(4 mg N)). We also convert the microbe ($M$) and native/invasive ($P$) variable to factors for model-fitting.

```{r}
# prepare the data for model fitting
dat_ex1_mod <-
  dat_ex1 |>
  dplyr::mutate(log_B = log(B),
                N = N - min(N),
                P = factor(P),
                M = factor(M))
```

### Model fitting

As detailed in the analysis plan (`01-plan/01-study-design/02-data-simulation.qmd`), we fit the following linear model to the log-transformed native biomass values:

$$
log(B_{i}) = \alpha + \beta_1\text{N}_{i} + \beta_2\text{M}_{i} + \beta_3\text{P}_{i} + \beta_4\text{N}_{i}\text{M}_{i} + \beta_5\text{N}_{i}\text{P}_{i} + \beta_6\text{M}_{i}\text{P}_{i} + \beta_7\text{N}_{i}\text{M}_{i}\text{P}_{i} + \epsilon_{i}
$$ {#eq-exp1-lm}

$$
\epsilon_{i} \sim Normal(0, \sigma_{residual})
$$ {#eq-exp1-lm-error}

To do this, we use the `lm()` function from the `stats` package:

```{r}
# fit the model to the experiment 1 data
lm_ex1 <- lm(log_B ~ N + M + P + N:M + N:P + M:P + N:M:P,
             data = dat_ex1_mod)

# extract the summary
lm_ex1_sum <- summary(lm_ex1)
```

#### Checking model fit

We examine the model fit by plotting the observed versus predicted values and sampling from the model to determine how well it can reproduce the observed data.

```{r}
# plot the observed versus predicted values
plot(dat_ex1_mod$log_B, predict(lm_ex1))
abline(0, 1)
```

```{r}
# check the r-squared value
lm_ex1_sum$r.squared
```

We also test whether the fitted model can produce reasonable estimates of the mean and the variance of log-biomass based on simulating from the model:

```{r}
# simulate the expected value of log B
log_B_sim <- predict(lm_ex1)

# add the stochasticity from the model
log_B_sim <- log_B_sim + rnorm(n = length(log_B_sim), mean = 0, lm_ex1_sum$sigma)

# create a table comparing the observed to the simulated mean and variance
dplyr::tibble(sim_obs = c("Observed", "Simulated"),
              mean_log_B = c(mean(dat_ex1_mod$log_B), mean(log_B_sim)),
              var_log_B = c(var(dat_ex1_mod$log_B), var(log_B_sim)))
```

#### Testing model assumptions

We use a graphical analysis of the residuals to examine the model assumptions.

```{r}
# plot 1
plot(lm_ex1, 1)
```

```{r}
# plot 2
plot(lm_ex1, 2)
```

```{r}
# plot 3
plot(lm_ex1, 3)
```

```{r}
# plot 4
plot(lm_ex1, 4)
```

#### Hypothesis testing

Given that the model fit looks good and the assumptions are met, we proceed with the hypothesis test on the $beta_7$ coefficient which measures the difference in how natives and invasives respond to nitrogen and microbes.

$$
H_0: \beta_7 = 0
$$

$$
H_A:  \beta_7 \neq 0
$$

```{r}
# test with a likelihood ratio test
drop1(lm_ex1, test = "Chisq")
```

```{r}
# test using a standard coefficient test
lm_ex1_sum
```

We can summarise this into a table using `gtsummary` package. Note that to see which variables can be modified in the header, use `show_header_names(tbl)`.

```{r}
library(gtsummary)

# variables to include in a single row
single_row_vars <- c("N", "M", "P", "N:M", "N:P", "M:P", "N:M:P")

ex1_tbl <-
  gtsummary::tbl_regression(lm_ex1, show_single_row = single_row_vars) |>
  add_glance_source_note() |>
  modify_header(label = "**Model term**",
                estimate = "**Est.**",
                conf.low = "**CI95%**",
                p.value = "**P-value**")

# print the table
ex1_tbl

# export the table as a .rds file

# generate the path
output_path <- file.path(figure_table_path,
                         paste0("ex1-tbl-", i_species_sel, "-", "exclude-high-N-", exclude_high_N, ".rds"))

# export the object
saveRDS(object = ex1_tbl, file = output_path)
```


### Data visualisation

We will visualise the data in two ways. 

#### Directly visualise PSF

First, we will explicitly calculate the plant-soil feedback metric and examine how it changes with nitrogen to check our intuition about what this model means. For this, we use the following plant-soil feedback ($PSF$) metric where $\overline{B}$ is the average across replicates of plant biomass:

$$
PSF = \frac{\overline{B}_{microbes} - \overline{B}_{no \ microbes}}{\overline{B}_{no \ microbes}}
$$

When we calculate this metric and plot it for invasives and natives, we clearly see that the plant-soil feedback increases and becomes positives for invasives but not for natives.

```{r}
# plot plant-soil feedback changes with nitrogen

# summarise and pivot to the wide format
psf_metric <- 
  dat_ex1_mod |>
  dplyr::group_by(N, P, M) |>
  dplyr::summarise(B = mean(B)) |>
  tidyr::pivot_wider(id_cols = c("N", "P"),
                     names_from = M,
                     values_from = B)

# rename the variables
names(psf_metric) <- c("N", "P", "B_no_microbes", "B_microbes")

# calculate the competition metric
psf_metric <-
  psf_metric |>
  dplyr::mutate(PSF_metric = (B_microbes - B_no_microbes)/(B_no_microbes))

# plot the results
ggplot(data = psf_metric |> dplyr::mutate(P = ifelse(P == 0, "Native", "Invasive")),
       mapping = aes(x = N, y = PSF_metric)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "log(Nitrogen Level)", y = "PSF metric") +
  facet_wrap(~P) +
  theme_meta()
```

#### Visualise raw data + model

The second visualisation is to visualise the raw data and the model that we used to test the hypothesis:

```{r}
# extract model prediction with prediction interval
pred_ex1_mod <-
  tidyr::expand_grid(M = factor(c(0, 1)),
                     P = factor(c(0, 1)),
                     N = seq(0, max(dat_ex1_mod$N) + 0.05, 0.05))

# generate the predictions
pred_ex1 <-
  predict(lm_ex1, newdata = pred_ex1_mod, interval = "confidence") |> 
  as.data.frame() |>
  dplyr::tibble()

# rename the columns
names(pred_ex1) <- c("prediction", "lower", "upper")

# bind the predictions to the newdata template
pred_ex1_mod <- dplyr::bind_cols(pred_ex1_mod, dplyr::tibble(pred_ex1))

# run the label fixing
dat_ex1_plot <- fix_labels(x = dat_ex1_mod)
pred_ex1_plot <- fix_labels(x = pred_ex1_mod)

## function for plotting
exp1_plot <- function(x_dat, x_pred, P_sel, y_lims = NA) {
  
  # extract y_lims
  y_lim_range <-
    if (all(is.na(y_lims))) {
      range(c(x_dat$log_B, x_pred$upper, x_pred$lower)) + c(-0.05, 0.05)
    } else {
      y_lims
    }
  
  ggplot() +
  ggbeeswarm::geom_quasirandom(data = x_dat |> dplyr::filter(P == P_sel),
                               mapping = aes(x = N, y = log_B, colour = M),
                               width = 0.01) +
  geom_line(data = x_pred |> dplyr::filter(P == P_sel),
            mapping = aes(x = N, y = prediction, colour = M),
            show.legend = FALSE) +
  geom_ribbon(data = x_pred |> dplyr::filter(P == P_sel),
              mapping = aes(x = N, ymin = lower, ymax = upper, fill = M, colour = NULL),
              alpha = 0.1, show.legend = FALSE) +
  scale_colour_manual(values = c("Microbes" = "forestgreen", "No microbes" = "gray60")) +
  scale_fill_manual(values = c("Microbes" = "forestgreen", "No microbes" = "gray60")) +
  scale_x_continuous(breaks = round(unique(x_dat[["N"]]), 1)) +
  scale_y_continuous(limits = y_lim_range) +
  ylab("ln(Biomass) (g)") +
  xlab("ln(Nitrogen) (mg)") +
  ggtitle(paste0(P_sel, " species"))+
  theme_meta() +
  theme(legend.title = element_blank(),
        plot.title = element_text(hjust = 0.5))
  
}

# native plot
if (i_species_sel == "Erigeron_canadensis") {
  
  # create the native species graph
  p_n <- exp1_plot(x_dat = dat_ex1_plot, x_pred = pred_ex1_plot, 
                 P_sel = "Native", y_lims = NA)
  
  # create the invasive species graph
  output_path <- file.path(figure_table_path,
                           paste0("ex1-fig-natives-", "exclude-high-N-", exclude_high_N, ".rds"))

  # export the object
  saveRDS(object = p_n, file = output_path)
  
}

# invasive plot
p_i <- exp1_plot(x_dat = dat_ex1_plot, x_pred = pred_ex1_plot, 
                 P_sel = "Invasive", y_lims = NA)

# generate the path
output_path <- file.path(figure_table_path,
                         paste0("ex1-fig-", i_species_sel, "-", "exclude-high-N-", exclude_high_N, ".rds"))

# export the object
saveRDS(object = p_i, file = output_path)

# bind the plots using patchwork
p_n + p_i + 
  plot_layout(guides = "collect") +
  plot_annotation(tag_levels = "a", title = gsub("_", " ", i_species_sel))

```


## Simulation experiment {#sec-simulation-experiment}

We now use the model that was fitted to @sec-experiment-1 to simulate competition between natives and invasives based on how they respond to nitrogen and microbes (`01-plan/01-study-design/02-data-simulation.qmd`).

```{r}
# load function for simulating competition
source(here::here("functions/simulate_competition.R"))
```

We simulate competition for a range of per capita competition coefficients between 0.1 and 0.75 (i.e. steps of 0.05). Moreover, given that we want to sample extensively from the fitted model, each unique treatment conditions (i.e. nitrogen value, presence/absence of microbes and presence/absence of a simulated invasive) is replicated 100 times and each this is repeated 10 separate times (i.e. 10 simulations for each per capita competition coefficient value):

```{r}
# set-up a vector of competition values
alpha_vals <- seq(0.1, 0.75, 0.05)

# replicates per alpha value
alpha_vals <- rep(alpha_vals, each = 10)

# loop the simulation over these alpha_vals
sim_out <- vector("list", length = length(alpha_vals))
for (i in seq_along(sim_out)) {
  # run the simulation
  x <- 
    simulate_competition(N_vals = log(c(4, 8, 16, 32, 64)), 
                         M_vals = c(0, 1),
                         n_rep = 100,
                         fitted_model = lm_ex1,
                         alpha_IN = alpha_vals[i],
                         alpha_NI = alpha_vals[i])
  
  # add a competition coefficient value
  sim_out[[i]] <- 
    dplyr::bind_cols(dplyr::tibble(alpha_sim_rep = i,
                                   alpha_sim = alpha_vals[i]),
                     x)
}
```

For each simulated dataset, we model log-transformed native biomass as a function of nitrogen ($N$), presence/absence of microbes ($M$) and the presence/absence of invasives ($I$):

$$
\text{log}(B_{i}) = \alpha + \gamma_1\text{N}_{i} + \gamma_2\text{M}_{i} + \gamma_3\text{I}_{i} + \gamma_4\text{N}_{i}\text{M}_{i} + \gamma_5\text{I}_{i}\text{M}_{i} + \gamma_6\text{I}_{i}\text{N}_{i} + \gamma_7\text{N}_{i}\text{M}_{i}\text{I}_{i} + \epsilon_{i}
$$

$$
\epsilon_{i} \sim Normal(0, \sigma_{residual})
$$

We fit these models using the `lm()` function from the `stats` package and, for each simulated dataset, we extract the $\gamma_7$ parameter. This parameter describes the change in the net competitive effect of invasives on natives with nitrogen and microbes:

```{r}
# fit the relevant linear model to each simulated dataset and extract beta7 parameter
pred_coef <- 
  lapply(sim_out, function(x) {
  # fit the linear model
  lm_x <- lm(log(B) ~ N + M + I + N:M + I:M + I:N + N:M:I, 
           data = x |> dplyr::mutate(N = N, M = factor(M), I = factor(I)))
  # extract the coefficients
  coef_x <- coef(lm_x)[8]
  # remove the names
  names(coef_x) <- NULL
  # return the coefficient
  coef_x
})
```

We then examine the range of these $\gamma_7$ parameters based on the simulated datasets which informs our expectation for @sec-experiment-2. In this case, the range of simulated $\gamma_7$ parameters are all less than zero and, therefore, we expect to find a negative $\gamma_7$ parameter in @sec-experiment-2.

```{r}
# check the range
range(unlist(pred_coef))
```

### Data visualisation

We will visualise the data in two ways. 

#### Directly visualise competition

We directly calculate the competitive effect of invasives on natives as the biomass of natives alone \( (B_{N, \text{alone}}) \) divided by the biomass of natives with invasives \( (B_{N, \text{invasive}}) \). With this metric, if the effect of invasives on natives increases, the metric increases which makes it easy to interpret as an *increase in the strength of competition*. This plot will allow us to make sure that we are capturing a competition strength effect.

$$
C = \log\left(\frac{ B_{N, \text{alone}} }{ B_{N, \text{invasive}} } \right)
$$

What is clear from the visualisation below is that, with microbes, net competitive effect of invasives on natives increases strongly with nitrogen but not when there are no microbes.

```{r}
# summarise and pivot to the wide format
c_metric <- 
  sim_out |>
  dplyr::bind_rows() |>
  dplyr::group_by(N, M, I) |>
  dplyr::summarise(B = mean(B)) |>
  tidyr::pivot_wider(id_cols = c("N", "M"),
                     names_from = I,
                     values_from = B)

# rename the variables
names(c_metric) <- c("N", "M", "BN_alone", "BN_invasive")

# calculate the competition metric
c_metric <-
  c_metric |>
  dplyr::mutate(C = log(BN_alone/BN_invasive))

# plot the results
ggplot(data = c_metric |> dplyr::mutate(M = ifelse(M == 0, "No microbes", "Microbes")),
       mapping = aes(x = N, y = C)) +
  geom_point() +
  geom_smooth(method = "lm", colour = "black", size = 0.5, alpha = 0.25) +
  labs(x = "log(Nitrogen Level)", y = "Competition metric") +
  facet_wrap(~M) +
  theme_meta()
```

#### Visualise simulation predictions

In addition, we also visualise the model predictions:

```{r}
# bind into a data.frame
sim_df <- dplyr::bind_rows(sim_out)

# calculate an interval
sim_df_sum <-
  sim_df |>
  dplyr::mutate(B = log(B)) |>
  dplyr::group_by(N, M, I) |>
  dplyr::summarise(B_median = median(B),
                   B_pi_low = quantile(B, 0.25),
                   B_pi_high = quantile(B, 0.75)) |>
  dplyr::ungroup()

# fix labels for plotting
sim_df_sum <- fix_labels(x = sim_df_sum)

## function for plotting
sim_exp_plot <- function(x_dat, M_sel, y_lims = NA, col1, col2) {
  
  # extract y_lims
  y_lim_range <-
    if (all(is.na(y_lims))) {
      range(c(x_dat$B_pi_low, x_dat$B_pi_high)) + c(-0.025, 0.025)
    } else {
      y_lims
    }
  
  ggplot() +
  geom_line(data = x_dat |> dplyr::filter(M == M_sel),
            mapping = aes(x = N, y = B_median, colour = I), linewidth = 0.75) +
  geom_ribbon(data = x_dat |> dplyr::filter(M == M_sel),
              mapping = aes(x = N, ymin = B_pi_low, ymax = B_pi_high, fill = I, colour = NULL),
              alpha = 0.1, show.legend = FALSE) +
  scale_colour_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_fill_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_x_continuous(breaks = round(unique(x_dat[["N"]]), 1)) +
  scale_y_continuous(limits = y_lim_range) +
  ylab("ln(Biomass) (g)") +
  xlab("ln(Nitrogen) (mg)") +
  ggtitle(paste0(M_sel))+
  theme_meta() +
  theme(legend.title = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
  
}

# No microbes
p_nm <- sim_exp_plot(x_dat = sim_df_sum, 
                     M_sel = "No microbes", 
                     y_lims = NA,
                     col1 = "gray0", col2 = "gray60")
  
# invasive plot
p_m <- sim_exp_plot(x_dat = sim_df_sum, 
                    M_sel = "Microbes", 
                    y_lims = NA,
                    col1 = "lightgreen", col2 = "forestgreen")

# bind the plots using patchwork
p_nm + p_m + 
  plot_layout() +
  plot_annotation(tag_levels = "a")
```


## Experiment 2 {#sec-experiment-2}

Based on the @sec-simulation-experiment, we predict that $\gamma_7 < 0$ in @sec-experiment-2 i.e. the effect of invasives on native biomass increases (i.e. competition gets stronger) with increasing nitrogen in the presence of microbes.

### Data cleaning 

We start by loading the data cleaning function for experiment 1:

```{r}
# load the experiment 1 data cleaning function
source(here::here("02-code/03-clean-exp2.R"))
```

Choose one of the species: "Erigeron_canadensis", "Phytolacca_americana", "Solidago_gigantea", "Sporobolus_indicus":

```{r}
# clean the data
dat_ex2 <- clean_exp2(data = dat_raw,
                      i_species = i_species_sel,
                      exclude_high_N = exclude_high_N) 

# check the data
head(dat_ex2)
```

### Data preparation

We prepare the data for the model fitting by log-transforming the native biomass variable ($B$) and subtracting minimum N-level from the N variable ($N$) so that the intercept corresponds to the lowest nitrogen level (log(4 mg N)). We also convert the microbe ($M$) and native/invasive ($P$) variable to factors for model-fitting.

```{r}
# prepare the data for model fitting
dat_ex2_mod <-
  dat_ex2 |>
  dplyr::mutate(log_B = log(B),
                N = N - min(N),
                I = factor(I),
                M = factor(M))
```

### Model fitting

As detailed in the analysis plan (`01-plan/01-study-design/02-data-simulation.qmd`), we fit the following linear model to the log-transformed native biomass values:

$$
\text{log}(B_{i}) = \alpha + \gamma_1\text{N}_{i} + \gamma_2\text{M}_{i} + \gamma_3\text{I}_{i} + \gamma_4\text{N}_{i}\text{M}_{i} + \gamma_5\text{I}_{i}\text{M}_{i} + \gamma_6\text{I}_{i}\text{N}_{i} + \gamma_7\text{N}_{i}\text{M}_{i}\text{I}_{i} + \epsilon_{i}
$$

$$
\epsilon_{i} \sim Normal(0, \sigma_{residual})
$$

To do this, we use the `lm()` function from the `stats` package:

```{r}
# fit the model to the experiment 1 data
lm_ex2 <- lm(log_B ~ N + M + I + N:M + I:M + I:N + N:M:I,
             data = dat_ex2_mod)

# extract the summary
lm_ex2_sum <- summary(lm_ex2)
```

#### Checking model fit

We examine the model fit by plotting the observed versus predicted values and sampling from the model to determine how well it can reproduce the observed data.

```{r}
# plot the observed versus predicted values
plot(dat_ex2_mod$log_B, predict(lm_ex2))
abline(0, 1)
```

```{r}
# check the r-squared value
lm_ex2_sum$r.squared
```

We also test whether the fitted model can produce reasonable estimates of the mean and the variance of log-biomass based on simulating from the model:

```{r}
# simulate the expected value of log B
log_B_sim <- predict(lm_ex2)

# add the stochasticity from the model
log_B_sim <- log_B_sim + rnorm(n = length(log_B_sim), mean = 0, lm_ex2_sum$sigma)

# create a table comparing the observed to the simulated mean and variance
dplyr::tibble(sim_obs = c("Observed", "Simulated"),
              mean_log_B = c(mean(dat_ex2_mod$log_B), mean(log_B_sim)),
              var_log_B = c(var(dat_ex2_mod$log_B), var(log_B_sim)))
```


#### Testing model assumptions

We use a graphical analysis of the residuals to examine the model assumptions.

```{r}
# plot 1
plot(lm_ex2, 1)
```

```{r}
# plot 2
plot(lm_ex2, 2)
```

```{r}
# plot 3
plot(lm_ex2, 3)
```

```{r}
# plot 4
plot(lm_ex2, 4)
```

#### Hypothesis testing

Given that the model fit looks good and the assumptions are met, we proceed with the hypothesis test on the $beta_7$ coefficient which measures the difference in how natives and invasives respond to nitrogen and microbes.

$$
H_0: \beta_7 = 0
$$

$$
H_A:  \beta_7 \neq 0
$$

```{r}
# test with a likelihood ratio test
drop1(lm_ex2, test = "Chisq")
```

```{r}
# test using a standard coefficient test
lm_ex2_sum
```

From this, we would reject the null hypothesis ($H_0: \gamma_7 = 0$) and accept the alternative $H_A:  \gamma_7 < 0$. This would indicate that the net competitive effect of invasives on natives increases with nitrogen but only in the presence of microbes.

```{r}
library(gtsummary)

# variables to include in a single row
single_row_vars <- c("N", "M", "I", "N:M", "M:I", "N:I", "N:M:I")

ex2_tbl <-
  gtsummary::tbl_regression(lm_ex2, show_single_row = single_row_vars) |>
  add_glance_source_note() |>
  modify_header(label = "**Model term**",
                estimate = "**Est.**",
                conf.low = "**CI95%**",
                p.value = "**P-value**")

# print the table
ex2_tbl

# export the table as a .rds file

# generate the path
output_path <- file.path(figure_table_path,
                         paste0("ex2-tbl-", i_species_sel, "-", "exclude-high-N-", exclude_high_N, ".rds"))

# export the object
saveRDS(object = ex2_tbl, file = output_path)
```


### Data visualisation

#### Directly visualise competition

As with the @sec-simulation-experiment, we first directly visualise competition by calculating a competition metric ($C$) using the following formula based on the treatment means:

$$
C = \log\left(\frac{ B_{N, \text{alone}} }{ B_{N, \text{invasive}} } \right)
$$

```{r}
# summarise and pivot to the wide format
c_metric <- 
  dat_ex2_mod |>
  dplyr::group_by(N, M, I) |>
  dplyr::summarise(B = mean(B)) |>
  tidyr::pivot_wider(id_cols = c("N", "M"),
                     names_from = I,
                     values_from = B)

# rename the variables
names(c_metric) <- c("N", "M", "BN_alone", "BN_invasive")

# calculate the competition metric
c_metric <-
  c_metric |>
  dplyr::mutate(C = log(BN_alone/BN_invasive))

# plot the results
ggplot(data = c_metric |> dplyr::mutate(M = ifelse(M == 0, "No microbes", "Microbes")),
       mapping = aes(x = N, y = C)) +
  geom_point() +
  geom_smooth(method = "lm", alpha = 0.25, colour = "black", se = FALSE) +
  labs(x = "log(Nitrogen Level)", y = "Competition metric") +
  facet_wrap(~M) +
  theme_meta()
```

#### Visualise raw data + model

The second visualisation is to visualise the raw data and the model that we used to test the hypothesis:

```{r}
# extract model prediction with prediction interval
pred_ex2_mod <-
  tidyr::expand_grid(M = factor(c(0, 1)),
                     I = factor(c(0, 1)),
                     N = seq(0, max(dat_ex2_mod$N) + 0.05, 0.05))

# generate the predictions
pred_ex2 <-
  predict(lm_ex2, newdata = pred_ex2_mod, interval = "prediction") |> 
  as.data.frame() |>
  dplyr::tibble()

# rename the columns
names(pred_ex2) <- c("prediction", "lower", "upper")

# bind the predictions to the newdata template
pred_ex2_mod <- dplyr::bind_cols(pred_ex2_mod, dplyr::tibble(pred_ex2))

# run the label fixing
dat_ex2_plot <- fix_labels(x = dat_ex2_mod)
pred_ex2_plot <- fix_labels(x = pred_ex2_mod)

## function for plotting
exp2_plot <- function(x_dat, x_pred, M_sel, y_lims = NA, col1, col2) {
  
  # extract y_lims
  y_lim_range <-
    if (all(is.na(y_lims))) {
      range(c(x_dat$log_B, x_pred$upper, x_pred$lower)) + c(-0.05, 0.05)
    } else {
      y_lims
    }
  
  ggplot() +
   ggbeeswarm::geom_quasirandom(data = x_dat |> dplyr::filter(M == M_sel),
                                mapping = aes(x = N, y = log_B, colour = I),
                                width = 0.01) +
   geom_line(data = x_pred |> dplyr::filter(M == M_sel),
             mapping = aes(x = N, y = prediction, colour = I),
             show.legend = FALSE) +
   geom_ribbon(data = x_pred |> dplyr::filter(M == M_sel),
               mapping = aes(x = N, ymin = lower, ymax = upper, fill = I, colour = NULL),
               alpha = 0.1, show.legend = FALSE) +
  scale_colour_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_fill_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
  scale_x_continuous(breaks = round(unique(x_dat[["N"]]), 1)) +
  scale_y_continuous(limits = y_lim_range) +
  ylab("ln(Biomass) (g)") +
  xlab("ln(Nitrogen) (mg)") +
  ggtitle(paste0(M_sel))+
  theme_meta() +
  theme(legend.title = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
  
}

# No microbes
p_nm <- exp2_plot(x_dat = dat_ex2_plot, x_pred = pred_ex2_plot, 
                  M_sel = "No microbes", 
                  y_lims = NA,
                  col1 = "gray0", col2 = "gray60")
  
# invasive plot
p_m <- exp2_plot(x_dat = dat_ex2_plot, x_pred = pred_ex2_plot, 
                 M_sel = "Microbes", 
                 y_lims = NA,
                 col1 = "lightgreen", col2 = "forestgreen")

# bind the plots using patchwork
p_nm + p_m + 
  plot_layout() +
  plot_annotation(tag_levels = "a")
```

#### Visualise simulation predictions

Finally, we also compare the predictions made using the @sec-simulation-experiment to the data we obtained in @sec-experiment-2:

```{r}
## function for plotting
exp2_sim_compare <- function(x_dat, x_sim, 
                             M_sel, y_lims = NA, col1, col2) {
  
  # extract y_lims
  y_lim_range <-
    if (all(is.na(y_lims))) {
      range(c(x_sim$B_pi_low, x_sim$B_pi_high)) + c(-0.025, 0.025)
    } else {
      y_lims
    }
  
  ggplot() +
    geom_line(data = x_sim |> dplyr::filter(M == M_sel),
              mapping = aes(x = N, y = B_median, colour = I), linewidth = 0.75) +
    geom_ribbon(data = x_sim |> dplyr::filter(M == M_sel),
                mapping = aes(x = N, ymin = B_pi_low, ymax = B_pi_high, fill = I, colour = NULL),
                alpha = 0.1, show.legend = FALSE) +
    ggbeeswarm::geom_quasirandom(data = x_dat |> dplyr::filter(M == M_sel),
                                 mapping = aes(x = N, y = log_B, colour = I),
                                 width = 0.01) +
    scale_colour_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
    scale_fill_manual(values = c("Native alone" = col1, "Native + invasive" = col2)) +
    scale_x_continuous(breaks = round(unique(x_dat[["N"]]), 1)) +
    scale_y_continuous(limits = y_lim_range) +
    ylab("ln(Biomass) (g)") +
    xlab("ln(Nitrogen) (mg)") +
    ggtitle(paste0(M_sel))+
    theme_meta() +
    theme(legend.title = element_blank(),
          plot.title = element_text(hjust = 0.5),
          legend.position = "bottom")
  
}

# No microbes
p_nm <-
  exp2_sim_compare(x_dat = dat_ex2_plot, x_sim = sim_df_sum, 
                   M_sel = "No microbes", 
                   y_lims = NA,
                   col1 = "gray0", col2 = "gray60")
  
# invasive plot
p_m <- 
  exp2_sim_compare(x_dat = dat_ex2_plot, x_sim = sim_df_sum, 
                   M_sel = "Microbes", 
                   y_lims = NA,
                   col1 = "lightgreen", col2 = "forestgreen")

# bind the plots using patchwork
p_nm + p_m + 
  plot_layout() +
  plot_annotation(tag_levels = "a")
```








