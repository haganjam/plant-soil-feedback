---
title: "Simulation and power analysis"
format: html
editor: source
---

## Simulate the data-generating process

We will use a simple simulation as an idealisation of the data-generating process for the experiment. For this, we have adapted the Lotka-Volterra competition equations:

$$
dS_n/dt = [r_{S_n}(N_{\text{avail}}) \cdot (1 - \beta_{S_n}(N_{\text{avail}})P)] \cdot S_n \cdot (1 - \frac{(S_n + \alpha_{ni}S_i)}{K_{S_n}})
$$
$$
dS_i/dt = [r_{S_i}(N_{\text{avail}}) \cdot (1 - \beta_{S_i}(N_{\text{avail}})P)] \cdot S_i \cdot (1 - \frac{(S_i + \alpha_{in}S_n)}{K_{S_i}})
$$

Where:

$dS_n/dt$: Rate of change of native species biomass.  
$dS_i/dt$: Rate of change of invasive species biomass.  

$r_{S_n}(N_{avail})$, $r_{S_i}(N_{avail})$: Nitrogen-dependent growth rates for the native and invasive species.  

$\beta_{S_n}$, $\beta_{S_i}$: Pathogen effects on the native and invasive species (fractional reduction in growth rate).  

$P$: Pathogen presence (0 = absent, 1 = present).  

$S_n$, $S_i$: Biomass of the native and invasive species, respectively.  

$\alpha_{ni}$, $\alpha_{in}$: Competition coefficients (effect of one species on the other).  

$K_{S_n}$, $K_{S_n}$: Carrying capacities for the native and invasive species.  

In these Lotka-Volterra competition equations, the growth rate ($r_{S_n}$ and $r_{S_i}$) is dependent on nitrogen availability via the Michaelis-Menten equation:

$$ r_{S_n}(N_{\text{avail}}) = r\text{max}_{S_n} \cdot (\frac{N_{\text{avail}}}{(K_{m, S_n} + N_{\text{avail}})}) $$
$$ r_{S_i}(N_{\text{avail}}) = r\text{max}_{S_i} \cdot (\frac{N_{\text{avail}}}{(K_{m, S_i} + N_{\text{avail}})}) $$
Where:

$r_{S_n}(N_{\text{avail}})$, $r_{S_i}(N_{\text{avail}})$: Effective growth rate based on nitrogen of the native and the invasive 
$r\text{max}_{S_n}$, $r\text{max}_{S_i}$: Maximum growth rate of the native and the invasive  
$K_{m, S_n}$, $K_{m, S_i}$: Half-saturation constant (nitrogen level at which growth is half of $r\text{max}$).
$N_{\text{avail}}$: Nitrogen availability (continuous input).  

Similarly, the effect of pathogens on growth rate ($\beta_{S_n}$ and $\beta_{S_i}$) also depends on nitrogen availability via a Michaelis-Menten function:

$$ \beta_{S_n}(N_{\text{avail}}) = \beta\text{max}_{S_n} \cdot (\frac{N_{\text{avail}}}{(K_{m\beta, S_n} + N_{\text{avail}})}) $$
$$ \beta_{S_i}(N_{\text{avail}}) = \beta\text{max}_{S_i} \cdot (\frac{N_{\text{avail}}}{(K_{m\beta, S_i} + N_{\text{avail}})}) $$


```{r}
# set-up the experimental design

# define nitrogen levels and pathogen levels
Nitrogen <- seq(2.5, 10, length.out = 5)
Pathogen <- c(0, 1)

# create treatment grid
grid_treat <- expand.grid(Nitrogen = Nitrogen, Pathogen = Pathogen)

# cefine plant treatments
plant_treatments <- data.frame(
  SN_treat = c(2.5, 0, 2.5),
  SI_treat = c(0, 2.5, 2.5)
)

# combine treatment grid with plant treatments
grid_list <- lapply(seq_len(nrow(plant_treatments)), function(i) {
  dplyr::bind_cols(grid_treat, plant_treatments[i, ])
})

# combine all treatment grids into a single data frame
treatments <- dplyr::bind_rows(grid_list)

# add a treatment_id variable
treatments <- dplyr::bind_cols(dplyr::tibble(treatment_id = as.character(seq_len(nrow(treatments)))),
                               treatments)

# print the treatments
treatments
```

```{r}
# function for simulating the experiment based on parameter tables and treatment tables
simulate_experiment <- function(times = seq(0, 10, by = 0.5), n_rep = 5, sigma_residual = 2.5,
                                params, treatments) {
  
  # load the required package
  library(deSolve)
  library(ggplot2)

  # function for nitrogen-dependent growth rate (Michaelis-Menten form)
  growth_rate <- function(Nitrogen, r_max, K_m) {
    return(r_max * Nitrogen / (K_m + Nitrogen))
  }

  # function for pathogen-dependent growth rate (Michaelis-Menten form)
  pathogen_effect <- function(Nitrogen, b_max, K_mb) {
    return(b_max * Nitrogen / (K_mb + Nitrogen))
  }

  # Lotka-Volterra competition model with nitrogen and pathogen dependent growth rates
  competition_model <- function(t, state, params) {
  
    # unpack state variables
    SN <- state["SN"]  # Native species biomass
    SI <- state["SI"]  # Invasive species biomass
  
    # unpack parameters
    with(as.list(params), {
    
      # calculate the pathogen effect
      beta_SN <- pathogen_effect(Nitrogen, b_SN_max, K_mb_SN)
      beta_SI <- pathogen_effect(Nitrogen, b_SI_max, K_mb_SI)
    
      # calculate nitrogen-dependent growth rates
      r_SN_effective <- growth_rate(Nitrogen, r_SN_max, K_m_SN) * (1 - beta_SN * Pathogen)
      r_SI_effective <- growth_rate(Nitrogen, r_SI_max, K_m_SI) * (1 - beta_SI * Pathogen)
    
      # define the ODEs
      dSN <- r_SN_effective * SN * (1 - (SN + alpha_NI * SI) / K_SN)
      dSI <- r_SI_effective * SI * (1 - (SI + alpha_IN * SN) / K_SI)
    
      # Return the rates of change
      list(c(dSN, dSI))
    })
    }

  # loop over each treatment
  out_list <- vector("list", length = nrow(treatments))
  out_stoch_list <- vector("list", length = nrow(treatments))
  for (i in seq_along(out_list)) {
  
  # initial conditions for species biomass
  state <- c(SN = treatments$SN_treat[i], SI = treatments$SI_treat[i])

  # nitrogen and pathogen treatments
  params$Nitrogen <- treatments$Nitrogen[i]
  params$Pathogen <- treatments$Pathogen[i]

  # solve the ODE
  out <- ode(y = state, times = times, func = competition_model, parms = params)
  
  out <-
    as.data.frame(out) |>
    dplyr::as_tibble() |>
    dplyr::filter(time == max(time)) |>
    dplyr::mutate(treatment_id = as.character(i))
  
  # replicate this row n_rep times
  out_stoch <- out[rep(1, n_rep), ]
  
  # get a block_id variable
  out_stoch <- dplyr::bind_cols(dplyr::tibble(block_id = seq_len(n_rep)),
                                out_stoch)
  
  # run SN and SI through the normal distribution
  out_stoch$SN <- ifelse(out_stoch$SN == 0, 0, 
                         rnorm(n = n_rep, mean = out_stoch$SN, sd = sigma_residual))
  out_stoch$SI <- ifelse(out_stoch$SI == 0, 0, 
                         rnorm(n = n_rep, mean = out_stoch$SI, sd = sigma_residual))
  
  # wrap outputs and add to list
  out_list[[i]] <- out
  out_stoch_list[[i]] <- out_stoch
  
  }

  # bind into data.frames
  out_dat <- dplyr::bind_rows(out_list)
  out_stoch_dat <- dplyr::bind_rows(out_stoch_list)

  # bind these data to the treatments
  out_dat <- dplyr::full_join(treatments, out_dat, by = "treatment_id")
  out_stoch_dat <- dplyr::full_join(treatments, out_stoch_dat, by = "treatment_id")

  # reorder the variables
  out_dat <-
    out_dat |>
    dplyr::select(treatment_id, Nitrogen, Pathogen, SN_treat, SI_treat,
                  time, SN, SI)
  
  out_stoch_dat <-
    out_stoch_dat |>
    dplyr::select(treatment_id, block_id, Nitrogen, Pathogen, SN_treat, SI_treat,
                  time, SN, SI)
  
  # return a list with the deterministic and stochastic data
  list(out_dat,
       out_stoch_dat)
  
}
```


```{r}
# hypothesis 1

# simulation parameters representing substantive hypothesis
params <- list(
  b_SN_max = 0.5,   # Max pathogen effect for native species
  b_SI_max = 0.25,   # Max pathogen for invasive species
  K_mb_SN = 0.5,      # pathogen effect Half-saturation constant for nitrogen for native species
  K_mb_SI = 1,      # pathogen effect Half-saturation constant for nitrogen for invasive species
  r_SN_max = 0.1,   # Max growth rate for native species
  r_SI_max = 0.15,   # Max growth rate for invasive species
  K_m_SN = 2,       # growth-rate Half-saturation constant for nitrogen for native species
  K_m_SI = 2,       # growth-rate Half-saturation constant for nitrogen for invasive species
  K_SN = 10,       # Carrying capacity for native species
  K_SI = 15,       # Carrying capacity for invasive species
  alpha_NI = 0.75,   # Competition coefficient (effect of invasive on native)
  alpha_IN = 0.75   # Competition coefficient (effect of native on invasive)
)

# simulate the experiment under hypothesis 1
h1 <- simulate_experiment(times = seq(0, 56, 1), n_rep = 30, sigma_residual = 0.1,
                          params = params, treatments = treatments)

# check the output
head(h1[[2]])

```

```{r}
# key part of the model is the change in growth rate with nitrogen and pathogens

# function for nitrogen-dependent growth rate (Michaelis-Menten form)
growth_rate <- function(Nitrogen, r_max, K_m) {
  return(r_max * Nitrogen / (K_m + Nitrogen))
}

# function for pathogen-dependent growth rate (Michaelis-Menten form)
pathogen_effect <- function(Nitrogen, b_max, K_mb) {
  return(b_max * Nitrogen / (K_mb + Nitrogen))
}

# natives

# calculate growth rates prior to pathogen effects
n_r <- growth_rate(Nitrogen = unique(treatments$Nitrogen), r_max = params$r_SN_max, K_m = params$K_m_SN)

# calculate the pathogen effect
n_r_p <- pathogen_effect(Nitrogen = unique(treatments$Nitrogen), b_max = params$b_SN_max, K_m = params$K_mb_SN)

# what is the actual growth rate
r_true_p <- n_r * (1 - n_r_p)

ggplot() +
  geom_line(mapping = aes(x = unique(treatments$Nitrogen), y = n_r)) +
  geom_line(mapping = aes(x = unique(treatments$Nitrogen), y = r_true_p), colour = "red")

```




```{r}
# prediction 1: plant soil feedback should declines with nitrogen for natives alone

# extract stochastic data
h1_pred1_s <- h1[[2]]

# psf for SN_treat == 2.5 & SI_treat == 0
h1_pred1_s <-
  h1_pred1_s |>
  dplyr::filter(SN_treat == 2.5, SI_treat == 0)

# extract the relevant data and pivot into the wide format
h1_pred1_s <-
  h1_pred1_s |>
  tidyr::pivot_wider(id_cols = c("Nitrogen", "block_id"),
                     names_from = Pathogen,
                     values_from = SN)

# rename the columns
names(h1_pred1_s) <- c("Nitrogen", "block_id", "sterile", "treatment")

# calculate plant-soil feedback
h1_pred1_s$psf <- with(h1_pred1_s, log(treatment/sterile))

# plot the data
ggplot(data = h1_pred1_s,
       mapping = aes(x = Nitrogen, y = (psf))) +
  geom_point() +
  geom_smooth() +
  theme_minimal()

```

```{r}
# prediction 2: plant soil feedback should stay constant with nitrogen for invasives alone

# extract stochastic data
h1_pred2_s <- h1[[2]]

# psf for SN_treat == 0 & SI_treat == 2.5
h1_pred2_s <-
  h1_pred2_s |>
  dplyr::filter(SN_treat == 0, SI_treat == 2.5)

# extract the relevant data and pivot into the wide format
h1_pred2_s <-
  h1_pred2_s |>
  tidyr::pivot_wider(id_cols = c("Nitrogen", "block_id"),
                     names_from = Pathogen,
                     values_from = SI)

# rename the columns
names(h1_pred2_s) <- c("Nitrogen", "block_id", "sterile", "treatment")

# calculate plant-soil feedback
h1_pred2_s$psf <- with(h1_pred2_s, log(treatment/sterile))

# plot the data
ggplot(data = h1_pred2_s,
       mapping = aes(x = Nitrogen, y = (psf))) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_minimal()

```

```{r}
# prediction 3: invasive should be more competitive with increasing N 

# extract stochastic data
h1_pred3_s <- h1[[2]]

# SN_treat == 2.5 & SI_treat == 2.5
h1_pred3_s <-
  h1_pred3_s |>
  dplyr::filter(SN_treat == 2.5, SI_treat == 2.5) |>
  dplyr::mutate(invasive_dominance = SI/(SI + SN))

# plot the data
ggplot(data = h1_pred3_s,
       mapping = aes(x = Nitrogen, y = invasive_dominance, colour = as.character(Pathogen))) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_minimal()

```


```{r}
dat <- h1[[2]]

ggplot(data = dat,
       mapping = aes(x = Nitrogen, y = SN, colour = as.character(Pathogen))) +
  geom_point()

```

```{r}
ggplot(data = dat,
       mapping = aes(x = Nitrogen, y = SI, colour = as.character(Pathogen))) +
  geom_point()

```





