---
title: "Analysis plan"
format: 
  html:
    embed-resources: true
html-math-method: 
  method: katex
editor: source
execute:
  warning: false
---

# Data simulation

In this document, we a data simulation that describes the planned experiments.

```{r}
# load relevant libraries
library(ggplot2)
```


## Experiment 1:

### Causal structure

For experiment 1, the Directed Acyclic Graph representing the causal structure in the experiment. Specifically, the biomass of plants (B) after 8-weeks of growth is a function of experimental nitrogen-level (N) and the presence or absence of soil microbes (M) and the whether the plant is a native or invasive (P).

```{r}
dag1 <- dagitty::dagitty(x = 'dag {
bb="0,0,1,1"
B [pos="0.35,0.45"]
M [pos="0.2,0.45"]
N [pos="0.5,0.45"]
P [pos="0.35,0.425"]
M -> B
N -> B
P -> B
}
'
)
plot(dag1)
```

### Generative model description

This DAG can be modelled this as a simple linear model. However, we are interested in the *proportional* changes in plant biomass. Therefore, we will fit the model on the log-scale. This implies the following generative model on the natural scale where:

  $B$ - Biomass (mg)

  $N$ - log(N mg)
  $M$ - 0 - microbes absent, 1 - microbes present
  $P$ - 0 - native, 1 - invasive

$$
B_{i} = e^{\alpha + \beta_1\text{N}_{i} + \beta_2\text{M}_{i} + \beta_3\text{P}_{i} + \beta_4\text{N}_{i}\text{M}_{i} + \beta_5\text{N}_{i}\text{P}_{i} + \beta_6\text{M}_{i}\text{P}_{i} + \beta_7\text{N}_{i}\text{M}_{i}\text{P}_{i} + \epsilon_{i}}
$$

$$
\epsilon_{i} \sim Normal(0, \sigma_{residual})
$$

We simulate this model in the following way. First, we simulate the data based on the experimental design. The experimental design crosses four levels of nitrogen (4, 8, 16, 32 and 64 mg) ($N$), the presence or absence of conditioned microbes ($M$) and whether a plant is native or invasive ($P$). For this initial simulation, we set the number of replicates (`n_rep`) to 100 per treatment combination as we are interested in making sure the model works.

```{r}
# set the number of replicates
n_rep <- 100

# nitrogen-levels
N_lev <- log(c(4, 8, 16, 32, 64))

# soil microbe presence-absence
M_lev <- c(0, 1)

# native or invasive plant
P_lev <- c(0, 1)

# create all combinations of factors
factor_combinations <- 
  tidyr::expand_grid(
    M = M_lev,
    P = P_lev,
    N = N_lev
    )

# add replicates for each combination
experiment_design <- factor_combinations |>
  dplyr::slice(rep(1:dplyr::n(), each = n_rep)) |>
  dplyr::mutate(rep = rep(1:n_rep, times = nrow(factor_combinations))) |>
  dplyr::tibble()

# simulate the nitrogen values
N <- experiment_design$N

# transform so that the intercept represents the lowest level of nitrogen
N <- (N - min(N))

# simulate the microbe presence-absence
M <- experiment_design$M

# simulate the native vs. invasive
P <- experiment_design$P
```

Now that we have simulated the raw data values for $N$, $M$ and $P$, we need to set-up some model parameters. The $\beta$ parameters in the model represents the proportional change in plant biomass on the natural scale. These parameters therefore need to be carefully chosen so that they make sense on the log-scale. For the purposes of this initial simulation, this is not that important but we provide the transformation so that the interpretation the natural scale is also clear:

```{r}
# residual standard deviation
sigma_residual <- 0.10

# alpha - intercept: expected log biomass when N, M, and P are all 0
alpha <- 1.5
print(paste0("alpha: ", round(exp(alpha), 2), 
             " dry biomass (mg) when N=0, no microbes, and native plant"))

# beta1 - effect of nitrogen (N) when M = 0 and P = 0
beta1 <- 0.2
print(paste0("beta1: ", round((exp(beta1) - 1) * 100, 2), 
             " % change in biomass per unit N when no microbes and native plant"))

# beta2 - effect of microbes (M) when N = 0 and P = 0
beta2 <- -0.75
print(paste0("beta2: ", round((exp(beta2) - 1) * 100, 2), 
             " % change in biomass with microbes when N=0 and native plant"))

# beta3 - effect of plant origin (P) when N = 0 and M = 0
beta3 <- 0
print(paste0("beta3: ", round((exp(beta3) - 1) * 100, 2), 
             " % change in biomass for invasive plant when N=0 and no microbes"))

# beta4 - interaction: N × M
beta4 <- 0.05
print(paste0("beta4: ", round((exp(beta4) - 1) * 100, 2), 
             " % additional change for N with microbes (vs. no microbes)"))

# beta5 - interaction: N × P
beta5 <- 0.00
print(paste0("beta5: ", round((exp(beta5) - 1) * 100, 2), 
             " % additional change for N with invasive plants (vs. natives)"))

# beta6 - interaction: M × P
beta6 <- 0.00
print(paste0("beta6: ", round((exp(beta6) - 1) * 100, 2), 
             " % interaction effect of microbes and plant origin at N = 0"))

# beta7 - three-way interaction: N × M × P
beta7 <- 0.4
print(paste0("beta7: ", round((exp(beta7) - 1) * 100, 2), 
             " % additional effect when N increases, with microbes and invasive plant, beyond all lower-order effects"))
```

Most important for this experiment is $\beta_7$ parameter. Specifically, if $\beta_7 \neq 0$, it means the way N influences the strength of plant-soil feedback differs between natives and invasives:

+ If $\beta_7 > 0$, the plant-soil feedback becomes more positive (or less negative) with increasing N in invasives compared to natives.  
+ If $\beta_7 < 0$, the plant-soil feedback becomes more negative with increasing N in invasives compared to natives.

### Data simulation

Now that we have gone through this generative model, we can now use these parameters to simulate from it:

```{r}
# simulate the observed plant biomass on the natural scale
B <- exp(
  alpha +
    (beta1 * N) +                     # effect of nitrogen
    (beta2 * M) +                     # effect of microbes
    (beta3 * P) +                     # effect of plant origin
    (beta4 * N * M) +                 # N × M interaction
    (beta5 * N * P) +                 # N × P interaction
    (beta6 * M * P) +                 # M × P interaction
    (beta7 * N * M * P) +             # N × M × P three-way interaction
    rnorm(n = length(N), mean = 0, sd = sigma_residual)  # residual error
)
```

Using these simulated data, we fit a linear model on the log-scale and therefore we transform the model as follows:

$$
log(B_{i}) = \alpha + \beta_1\text{N}_{i} + \beta_2\text{M}_{i} + \beta_3\text{P}_{i} + \beta_4\text{N}_{i}\text{M}_{i} + \beta_5\text{N}_{i}\text{P}_{i} + \beta_6\text{M}_{i}\text{P}_{i} + \beta_7\text{N}_{i}\text{M}_{i}\text{P}_{i} + \epsilon_{i}
$$

$$
\epsilon_{i} \sim Normal(0, \sigma_{residual})
$$

We can now use the `lm()` function from the `stats` package to fit this model to the data and see if we can recover the parameters that we simulated.

```{r}
# fit the linear model
lm1 <- lm(log(B) ~ N + M + P + N:M + N:P + M:P + N:M:P)

# extract the summary
lm1_sum <- summary(lm1)

# print the summary
lm1_sum$sigma
lm1_sum
```

In this simulation, $\beta_7$ was greater than 0 which means that the plant-soil feedback should become more positive (i.e. less negative) with increasing N in invasives compared to natives. Let's see if we can see this in the data.

```{r}
library(ggplot2)

ggplot(data = dplyr::tibble(N = N, M = as.character(M), P = as.character(P), B = B),
       mapping = aes(x = N, y = B, colour = M)) +
  geom_jitter(alpha = 0.5) +
  geom_smooth(method = "lm") +
  facet_wrap(~P) +
  theme_bw()
```

This model describes the biomass of native and invasive plants under different nitrogen-levels in the presence and absence of microbes. In the second part 

```{r}
# extract parameters from the fitted model
extract_model_parameters <- function(model) {
  # extract the model coefficients
  model_coef <- model[["coefficients"]]
  names(model_coef) <- NULL
  # wrap the coefficients into a list
  list(alpha = model_coef[1],
       beta1 = model_coef[2],
       beta2 = model_coef[3],
       beta3 = model_coef[4],
       beta4 = model_coef[5],
       beta5 = model_coef[6],
       beta6 = model_coef[7],
       beta7 = model_coef[8])
}

# extract sigma from the fitted model
extract_model_sigma <- function(model) {
  # extract the model summary
  model_summary <- summary(model)
  # extract the sigma value
  model_summary[["sigma"]]
}

# Function to compute expected log-biomass
log_biomass <- function(N, M, P, model_parameters) {
  
  with(model_parameters,
       alpha +
       beta1 * N +
       beta2 * M +
       beta3 * P +
       beta4 * N * M +
       beta5 * N * P +
       beta6 * M * P +
       beta7 * N * M * P)
  
}


# Per capita competition coefficients
alpha_IN <- 0.3  # invasive effect on native
alpha_NI <- 0.2  # native effect on invasive


# Simulate both species with simultaneous competition
simulate_competition <- function(N_vals, M_vals, 
                                 n_rep = 50,
                                 fitted_model,
                                 alpha_IN = 0.3,
                                 alpha_NI = 0.3) {
  
  # extract the model parameters
  mod_pars <- extract_model_parameters(model = fitted_model)

  # extract the sigma_residual
  sigma_residual <- extract_model_sigma(model = fitted_model)
    
  # create an empty list
  results <- list()
  
  for (N in N_vals) {
  for (M in M_vals) {
    for (rep in seq_len(n_rep)) {
      
      # Expected log-biomass
      log_nat <- log_biomass(N, M, 0, model_parameters = mod_pars)
      log_inv <- log_biomass(N, M, 1, model_parameters = mod_pars)
      
      # Baseline biomass (no competition)
      B_N0 <- exp(log_nat + rnorm(1, 0, sigma_residual))
      B_I0 <- exp(log_inv + rnorm(1, 0, sigma_residual))
      
      # Denominator (shared in both equations)
      denom <- 1 - alpha_IN * alpha_NI
      
      # Solve system: equilibrium biomass under mutual competition
      B_N_star <- (B_N0 - alpha_IN * B_I0) / denom
      B_I_star <- (B_I0 - alpha_NI * B_N0) / denom
      
      # Ensure biomass is non-negative
      B_N_star <- max(B_N_star, 0)
      B_I_star <- max(B_I_star, 0)
      
      # Store outputs
      results[[length(results) + 1]] <- tibble(
        N = N,
        M = M,
        C = 0,
        P = 0,
        replicate = rep,
        biomass = B_N0
      )
      results[[length(results) + 1]] <- tibble(
        N = N,
        M = M,
        C = 0,
        P = 1,
        replicate = rep,
        biomass = B_I0
      )
      results[[length(results) + 1]] <- tibble(
        N = N,
        M = M,
        C = 1,
        P = 0,
        replicate = rep,
        biomass = B_N_star
      )
      results[[length(results) + 1]] <- tibble(
        N = N,
        M = M,
        C = 1,
        P = 1,
        replicate = rep,
        biomass = B_I_star
      )
    }
  }
}

dplyr::bind_rows(results) |> dplyr::arrange(N, M, C, P, replicate)

}

# run the simulation
sim_results <- simulate_competition(N_vals = log(c(4, 8, 16, 32, 64)), 
                                    M_vals = c(0, 1), 
                                    n_rep = 50,
                                    fitted_model = lm1,
                                    alpha_IN = 0.3,
                                    alpha_NI = 0.3)

# prepare the simulated data for plotting (i.e. names and leves)

# plot
ggplot(sim_results, aes(x = N, y = log(biomass), color = C)) +
  stat_summary(fun = mean, geom = "line") +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.2, aes(fill = Scenario), color = NA) +
  labs(x = "log(Nitrogen Level)", y = "Native Biomass") +
  facet_wrap(~M) +
  theme_minimal()

```

```{r}


```







### Simulated data

To design write the code used to perform the above hypothesis tests, we will simulate data that is consistent with this experiment (i.e. the data that we expect to obtain).

```{r}
# the exact values of the parameters are not that important in this case
n_rep = 8
sigma_residual = 0.10
N_lev = log(c(4, 8, 16, 32, 64))
M_lev = c(0, 1)
alpha = 4.5
beta1 = 0.2
beta2 = -0.12
beta3 = -0.1

# simulate nitrogen values
N <- rep(rep(N_lev, each = n_rep), length(M_lev))
  
# simulate microbe presence-absence
M <- rep(M_lev, each = length(N_lev) * n_rep)
  
# simulate the expected log plant biomass
mu <- (beta1 * (N - min(N))) + (beta2 * M) + (beta3 * (N - min(N)) * M)
  
# transform back from log-scale and apply alpha
Y <- alpha * exp(mu + rnorm(n = length(N), mean = 0, sd = sigma_residual))
  
# return the simulated data as a data frame
dat_e1 <- dplyr::tibble("N" = N, "M" = M, "L" = Y)
```

### Data analysis

In addition to the standard data cleaning and exploratory data analysis procedures that must occur in any data-driven scientific project, there are two important transformations that need to be done for the analysis. First, we will substract the minimum nitrogen-level (log-scale) so that the lowest nitrogen-level in the model and, therefore, the intercept term represents the expected plant biomass at the lowest-level of nitrogen without microbes. Additionally, we will need to log-transform the plant biomass variable.

```{r}
# data transformations

# translate nitrogen by the minimum
dat_e1$N_trans <- with(dat_e1, N - min(N))

# log-transform plant biomass
dat_e1$L_log <- log(dat_e1$L)

# check the data
head(dat_e1)
```

Now we are ready to fit the model:

```{r}
# fit the statistical model
lm_e1 <- lm(L_log ~ M + N_trans + M:N_trans, data = dat_e1)
```

Prior to interpreting the results, we need to check the model assumptions. With linear regression, there are 

Specifically, we will check that the distribution of the model residuals are at least approximately normal:

```{r}
# check for residual normality
lm_e1_res <- residuals(lm_e1)

# plot a qqplot of the residuals
qqnorm(lm_e1_res, main = "Residual Q-Q Plot")
qqline(lm_e1_res, col = "red")
```

Next, we will test the homogeneity of variance assumption by examining a plot of the residuals versus the fitted values. There should be no pattern in the data:

```{r}
# plot residuals vs fitted values
plot(lm_e1$fitted.values, residuals(lm_e1), 
     xlab = "Fitted Values", 
     ylab = "Residuals", 
     main = "Residuals vs Fitted Values",
     pch = 20, col = "blue")

# add a horizontal line at 0 for reference
abline(h = 0, col = "red", lty = 2)
```

If these assumptions are met as indicated by the graphs above (although whether the assumptions are met will always be a judgement call), we can then examine the results and evaluate our hypothesis:

```{r}
# check the model summary
summary(lm_e1)
```

In this output, the $\beta_3$ parameter is the "M:N_trans" parameter. This output indicates that $\beta_3$ is significantly less than zero ($t_1 = -4.03; P = 0.00013$). Therefore, we would reject our null hypothesis ($H_0: \beta_3 \ge 0$) and infer support for our alternative hypothesis ($H_0: \beta_3 < 0$).

### Visualise the results

To visualise the results, we will plot the model against the raw data. In addition, we will calculate plant-soil feedback using the metric used by Goossens et al. (2023, npj):

$$
PSF_j = \frac{\overline{L}_{microbes} - \overline{L}_{no \ microbes}}{\overline{L}_{no \ microbes}}
$$

In this equation, the $\overline{L}$ is the average across replicates of plant biomass for a given nitrogen level. Therefore, to obtain a measurement of the error around this estimate for each level of nitrogen, we used bootstrapping.

```{r}
# function for bootstrapping the sample and estimating psf
bootstrap_psf <- function(data, n, resp = "L") {
  # bootstrap the psf estimates n times
  resampled_psf <- lapply(1:n, function(i) {
    # make a y-variable
    data$Y <- data[[resp]]
    # get bootstrap indices
    indices <- sample(seq_len(nrow(data)), replace = TRUE)
    # extract the re-sampled data
    resample_i <- data[indices, ]
    # calculate psf
    suppressMessages(
      resample_i_wide <-
      resample_i |>
      dplyr::group_by(N, M) |>
      dplyr::summarise(Y_m = mean(Y, na.rm = TRUE)) |>
      tidyr::pivot_wider(id_cols = "N",
                         names_from = "M",
                         values_from = "Y_m")
      )
    names(resample_i_wide) <- c("N", "M_abs", "M_pres")
   # calculate plant-soil feedback
   resample_i_wide$psf <- with(resample_i_wide, (M_pres-M_abs)/M_abs)
   # return the re-sampled data
   return(resample_i_wide)
  })
  # return the output
  return(dplyr::bind_rows(resampled_psf, .id = "bootstrap_i"))
}
```

Plot the model results along with the bootstrapped plant-soil feedback metrics:

```{r}
# log-scale

# get model predictions
pred_e1 <- dplyr::as_tibble(predict(lm_e1, interval = "confidence"))

# add the fit statistics to the data
plot_e1 <-
  dat_e1 |>
  dplyr::mutate(fit = pred_e1$fit,
                lwr = pred_e1$lwr,
                upr = pred_e1$upr)

# plot the data on the log-scale
p1 <-
  ggplot(data = plot_e1 |> dplyr::mutate(M = as.character(M))) +
  geom_point(mapping = aes(x = N, y = L_log, colour = M)) +
  geom_line(mapping = aes(x = N, y = fit, colour = M)) +
  geom_ribbon(mapping = aes(x = N, ymin = lwr, ymax = upr, fill = M), alpha = 0.1) +
  ylab("Native biomass (mg) (log-scale)") +
  xlab("log(N)") +
  theme_bw()

# calculate plant soil feedback metric

# bootstrapped
psf_e1_boot <- bootstrap_psf(data = dat_e1, n = 1000, resp = "L")

# summarise these bootstrapped samples
psf_e1_boot <-
  psf_e1_boot |>
  dplyr::group_by(N) |>
  dplyr::summarise(psf_mean = mean(psf, na.rm = TRUE),
                   psf_sd = sd(psf, na.rm = TRUE), .groups = "drop")

# plot the change
p2 <-
  ggplot(data = psf_e1_boot,
       mapping = aes(x = N, y = psf_mean)) +
  geom_point() +
  geom_errorbar(mapping = aes(ymin = psf_mean - psf_sd,
                              ymax = psf_mean + psf_sd),
                width = 0) +
  ylab("Plant-soil feedback") +
  xlab("log(N)") +
  theme_bw()

cowplot::plot_grid(p1, p2, nrow = 1, rel_widths = c(1.3, 1))
```

## Experiment 2:

The analysis for experiment 2 is very similar to that for experiment 1. The causal structure, represented by the Directed Acyclic Graph, models the biomass of invasive plants (I) after 8-weeks of growh as a function of experimental nitrogen-level (N) and the presence or absence of soil microbes (M).

```{r}
dag2 <- dagitty::dagitty(x = 'dag {
bb="0,0,1,1"
I [pos="0.28,0.29"]
M [pos="0.215,0.200"]
N [pos="0.35,0.200"]
M -> I
N -> I
}'
)
plot(dag2)
```

We hypothesise that plant-soil feedback does not change or becomes weaker (i.e. has a weaker negative effect on plant biomass) with increasing nitrogen for invasive species. Based on this experimental design, we will use the following linear model to analyse this experiment:

$$
log(I_{i}) = \alpha + \beta_1\text{N}_{i} + \beta_2\text{M}_{i} + \beta_3\text{N}_{i}\text{M}_{i} + \epsilon_{i}
$$
$$
\epsilon_{i} \sim Normal(0, \sigma_{residual})
$$
Based on this model, we can set-up the statistical hypotheses as follows. The null hypothesis is that plant-soil feedback does not change or becomes weaker:

$$
H_0: \beta_3 \ge 0
$$

The alternative hypothesis is that plant-soil feedback becomes stronger.

$$
H_A: \beta_3 \lt 0
$$

Therefore, if $\beta_3$ is significantly less than zero (i.e. $P < 0.025$), we would interpret this as evidence that plant-soil feedback does become stronger with increasing N. However, if $\beta_3$ is not significantly less than zero (i.e. $P \ge 0.025$), then we cannot reject the null hypothesis and we infer that nitrogen does not modify the strength of plant-soil feedback in invasive species.

### Simulated data

We will simulate data that is consistent with this experiment (i.e. the data that we expect to obtain).

```{r}
# the exact values of the parameters are not that important in this case
n_rep = 8
sigma_residual = 0.10
N_lev = log(c(4, 8, 16, 32, 64))
M_lev = c(0, 1)
alpha = 4.5
beta1 = 0.2
beta2 = -0.12
beta3 = 0

# simulate nitrogen values
N <- rep(rep(N_lev, each = n_rep), length(M_lev))
  
# simulate microbe presence-absence
M <- rep(M_lev, each = length(N_lev) * n_rep)
  
# simulate the expected log plant biomass
mu <- (beta1 * (N - min(N))) + (beta2 * M) + (beta3 * (N - min(N)) * M)
  
# transform back from log-scale and apply alpha
Y <- alpha * exp(mu + rnorm(n = length(N), mean = 0, sd = sigma_residual))
  
# return the simulated data as a data frame
dat_e2 <- dplyr::tibble("N" = N, "M" = M, "I" = Y)
```

### Data analysis

As with experiment 1, we will substract the minimum nitrogen-level (log-scale) so that the lowest nitrogen-level in the model and, therefore, the intercept term represents the expected plant biomass at the lowest-level of nitrogen without microbes. Additionally, we will need to log-transform the plant biomass variable.

```{r}
# data transformations

# translate nitrogen by the minimum
dat_e2$N_trans <- with(dat_e2, N - min(N))

# log-transform plant biomass
dat_e2$I_log <- log(dat_e2$I)

# check the data
head(dat_e2)
```

Next, we fit the model.

```{r}
# fit the statistical model
lm_e2 <- lm(I_log ~ M + N_trans + M:N_trans, data = dat_e2)
```

Check model assumptions using a graphical analysis of the residuals: Residual normality.

```{r}
# check for residual normality
lm_e2_res <- residuals(lm_e2)

# plot a qqplot of the residuals
qqnorm(lm_e2_res, main = "Residual Q-Q Plot")
qqline(lm_e2_res, col = "red")
```

Homogeneity of variance assumption:

```{r}
# plot residuals vs fitted values
plot(lm_e2$fitted.values, residuals(lm_e2), 
     xlab = "Fitted Values", 
     ylab = "Residuals", 
     main = "Residuals vs Fitted Values",
     pch = 20, col = "blue")

# add a horizontal line at 0 for reference
abline(h = 0, col = "red", lty = 2)
```

Once the assumptions have been checked and deemed to have been passed, we can check the model results:

```{r}
# check the model summary
summary(lm_e2)
```

The $\beta_3$ parameter is the "M:N_trans" parameter. This output indicates that $\beta_3$ is not significantly less than zero ($t_1 = 1.1; P = 0.27$). Therefore, we cannot reject the null hypothesis ($H_0: \beta_3 \ge 0$) and, therefore, that plant-soil feedback does not become stronger with nitrogen for invasive species.

### Visualise the results

We will visualise these results in the same way that we visualised the results for experiment 1 but this time we will, of course, focus on invasive species biomass.

```{r}
# log-scale

# get model predictions
pred_e2 <- dplyr::as_tibble(predict(lm_e2, interval = "confidence"))

# add the fit statistics to the data
plot_e2 <-
  dat_e2 |>
  dplyr::mutate(fit = pred_e2$fit,
                lwr = pred_e2$lwr,
                upr = pred_e2$upr)

# plot the data on the log-scale
p1 <-
  ggplot(data = plot_e2 |> dplyr::mutate(M = as.character(M))) +
  geom_point(mapping = aes(x = N, y = I_log, colour = M)) +
  geom_line(mapping = aes(x = N, y = fit, colour = M)) +
  geom_ribbon(mapping = aes(x = N, ymin = lwr, ymax = upr, fill = M), alpha = 0.1) +
  ylab("Invasive biomass (mg) (log-scale)") +
  xlab("log(N)") +
  theme_bw()

# calculate plant soil feedback metric

# bootstrapped
psf_e2_boot <- bootstrap_psf(data = dat_e2, n = 1000, resp = "I")

# summarise these bootstrapped samples
psf_e2_boot <-
  psf_e2_boot |>
  dplyr::group_by(N) |>
  dplyr::summarise(psf_mean = mean(psf, na.rm = TRUE),
                   psf_sd = sd(psf, na.rm = TRUE), .groups = "drop")

# plot the change
p2 <-
  ggplot(data = psf_e2_boot,
       mapping = aes(x = N, y = psf_mean)) +
  geom_point() +
  geom_errorbar(mapping = aes(ymin = psf_mean - psf_sd,
                              ymax = psf_mean + psf_sd),
                width = 0) +
  ylab("Plant-soil feedback") +
  xlab("log(N)") +
  theme_bw()

cowplot::plot_grid(p1, p2, nrow = 1, rel_widths = c(1.3, 1))
```


## Experiment 3:

```{r}
dag3 <- dagitty::dagitty(x = 'dag {
bb="0,0,1,1"
I [exposure,pos="0.284,0.180"]
L [outcome,pos="0.285,0.300"]
M [pos="0.153,0.180"]
N [pos="0.418,0.180"]
I -> L
M -> L
N -> L
}
'
)
plot(dag3)
```


$$
log(L_{i}) = \alpha + \beta_1\text{N}_{i} + \beta_2\text{M}_{i} + \beta_3\text{I}_{i} + \beta_4\text{N}_{i}\text{M}_{i} + \beta_5\text{I}_{i}\text{M}_{i} + \beta_6\text{I}_{i}\text{N}_{i} + \beta_7\text{N}_{i}\text{M}_{i}\text{I}_{i} + \epsilon_{i}
$$

$$
\epsilon_{i} \sim Normal(0, \sigma_{residual})
$$

$$
H_0: \beta_7 \ge 0
$$

The alternative hypothesis is that plant-soil feedback becomes stronger.

$$
H_A: \beta_7 \lt 0
$$

### Simulated data

We will simulate data that is consistent with this experiment (i.e. the data that we expect to obtain).

```{r}
# set the number of replicates
n_rep <- 8

# nitrogen-levels
N_lev <- log(c(4, 8, 16, 32, 64))

# soil microbe presence-absence
M_lev <- c(0, 1)

# invasive presence-absence
I_lev <- c(0, 1)

# create a grid of parameters
par_grid <- expand.grid(rep = seq_len(n_rep),
                        N = N_lev, M = M_lev, I = I_lev)

# extract the variables
N <- par_grid[["N"]]
M <- par_grid[["M"]]
I <- par_grid[["I"]]

# set the model parameters

# residual standard deviation
sigma_residual <- 0.05

# alpha - mean plant biomass without microbes on the natural scale
alpha <- 4.5

# beta1 - expected change in mean plant biomass without microbes on the log-scale
beta1 <- 0.10

# beta2 - expected change in mean plant biomass with and without microbes when N is zero without invasives
beta2 <- -0.25

# beta3 - expected change in mean plant biomass with and without invasives when N is zero without microbes
beta3 <- -0.10

# beta4
beta4 <- -0.05

# beta5
beta5 <- 0

# beta6
beta6 <- 0

# beta7
beta7 <- -0.1

# simulate the expected log plant biomass
mu <- (exp((beta1 * N) + (beta2 * M) + (beta3 * I) + (beta4 * N * M) + (beta5 * I * M) + (beta6 * I * N) + (beta7 * N * M * I) + rnorm(n = length(N), 0, sigma_residual)))

# simulate the observed log plant biomass
L <- alpha*mu

# return the simulated data as a data frame
dat_e3 <- dplyr::tibble("N" = N, "M" = M, "I" = I, "L" = L)
```

### Data analysis

We use the same transformations as we used in experiment 1 and 2.

```{r}
# data transformations

# translate nitrogen by the minimum
dat_e3$N_trans <- with(dat_e3, N - min(N))

# log-transform plant biomass
dat_e3$L_log <- log(dat_e3$L)

# check the data
head(dat_e3)
```

```{r}
# fit the statistical model
lm_e3 <- lm(L_log ~ N + M + I + N:M + I:M + I:N + M:I:N, data = dat_e3)
```

Check model assumptions using a graphical analysis of the residuals: Residual normality.

```{r}
# check for residual normality
lm_e3_res <- residuals(lm_e3)

# plot a qqplot of the residuals
qqnorm(lm_e3_res, main = "Residual Q-Q Plot")
qqline(lm_e3_res, col = "red")
```

```{r}
# plot residuals vs fitted values
plot(lm_e3$fitted.values, residuals(lm_e3), 
     xlab = "Fitted Values", 
     ylab = "Residuals", 
     main = "Residuals vs Fitted Values",
     pch = 20, col = "blue")

# add a horizontal line at 0 for reference
abline(h = 0, col = "red", lty = 2)
```

```{r}
# check the model summary
summary(lm_e3)
```

The $\beta_7$ parameter is the "N:M:I" parameter. This output indicates that $\beta_7$ is significantly less than zero () ($t_1 = -6.6; P < 0.001$). Therefore, we accept our alternative hypothesis that $\beta_7$ is less than zero which indicates that the competitive effect of invasives on natives increases with nitrogen but only with microbes.

Function to bootstrap the competition estimate.

```{r}
# function for bootstrapping the sample and estimating competition between natives and invasives
bootstrap_comp <- function(data, n) {
  # bootstrap the psf estimates n times
  resampled_comp <- lapply(1:n, function(i) {
    # get bootstrap indices
    indices <- sample(seq_len(nrow(data)), replace = TRUE)
    # extract the re-sampled data
    resample_i <- data[indices, ]
    # calculate psf
    suppressMessages(
      resample_i_wide <-
        resample_i |> 
        dplyr::group_by(N, M, I) |>
        dplyr::summarise(mean_L = mean(L, na.rm = TRUE)) |>
        dplyr::ungroup() |>
        tidyr::pivot_wider(id_cols = c("N", "M"),
                           names_from = "I",
                           values_from = "mean_L")
      )
   # rename the variables
   names(resample_i_wide) <- c("N", "M", "without_I", "with_I")
   # calculate competition
   resample_i_wide$competition <- with(resample_i_wide, with_I/without_I)
   # return the re-sampled data
   resample_i_wide <-
     if (any(is.na(resample_i_wide$competition))) {
       NA
       } else {
         resample_i_wide
       }
   return(resample_i_wide)
  })
  # remove the datasets with missing values
  resampled_comp <- resampled_comp[!sapply(resampled_comp, function(x) is.null(x) || (is.logical(x) && is.na(x)))]
  # return the output
  return(dplyr::bind_rows(resampled_comp, .id = "bootstrap_i"))
}
```

Plot the model results along with the bootstrapped competition metrics.

```{r}
# log-scale

# get model predictions
pred_e3 <- dplyr::as_tibble(predict(lm_e3, interval = "confidence"))

# add the fit statistics to the data
plot_e3 <-
  dat_e3 |>
  dplyr::mutate(fit = pred_e3$fit,
                lwr = pred_e3$lwr,
                upr = pred_e3$upr)

# plot the data on the log-scale
p1 <-
  ggplot(data = plot_e3 |> dplyr::mutate(M = as.character(M), I = as.character(I))) +
  geom_point(mapping = aes(x = N, y = L_log, colour = I)) +
  geom_line(mapping = aes(x = N, y = fit, colour = I)) +
  geom_ribbon(mapping = aes(x = N, ymin = lwr, ymax = upr, fill = I), alpha = 0.1) +
  facet_wrap(~ M) +
  ylab("Native biomass (mg) (log-scale)") +
  xlab("log(N)") +
  theme_bw()

# calculate competition

# bootstrapped
comp_e3_boot <- bootstrap_comp(data = dat_e3, n = 1000)

# check the bootstrapped data
summary(comp_e3_boot)

# summarise these bootstrapped samples
comp_e3_boot_sum <-
  comp_e3_boot |>
  dplyr::group_by(N) |>
  dplyr::summarise(comp_mean = mean(competition, na.rm = TRUE),
                   comp_sd = sd(competition, na.rm = TRUE))

# plot the change
p2 <-
  ggplot(data = comp_e3_boot_sum,
       mapping = aes(x = N, y = comp_mean)) +
  geom_point() +
  geom_errorbar(mapping = aes(ymin = comp_mean - comp_sd,
                              ymax = comp_mean + comp_sd),
                width = 0) +
  ylab("Competition") +
  xlab("log(N)") +
  theme_bw()

cowplot::plot_grid(p1, p2, nrow = 1, rel_widths = c(2, 1))
```




